package app.controller;

import java.util.Date;
import java.util.Optional;
import java.text.SimpleDateFormat;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RestController;

import app.model.User;
import app.model.Cuenta;
import app.service.UserService;
import app.service.CuentaService;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping(path="/user")
public class UserController {
	
	// This means to get the bean called userRepository
        // Which is auto-generated by Spring, we will use it to handle the data

	@Autowired
	private UserService userService;

	// @ResponseBody means the returned String is the response, not a view name
	// @RequestParam means it is a parameter from the GET or POST request

	//Sin @RequestBody, los campos se llenan con null
	//Sin @ResponseBody, realiza la accion correspondiente pero llega una respuesta de error 

	@PostMapping(path="/add")
	public @ResponseBody User create(@RequestBody User user) {
		Cuenta cuenta = new Cuenta();		
		String pattern = "yyyy-MM-dd HH:mm:ss";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

		String fecha = simpleDateFormat.format(new Date());
                cuenta.setFecha(fecha);
		user.setCuenta(cuenta);
		return 	userService.save(user);
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		return userService.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Optional<User> findById(@PathVariable("id") Long id){
		return userService.findById(id);
	}

	@DeleteMapping(path="/del/{id}")
    	public @ResponseBody void delete(@PathVariable("id") Long id) {
        	userService.deleteUser(id);
    	}
	
	@PutMapping(path="/{id}")
	public @ResponseBody void sumar(@PathVariable("id") Long id,
                          @RequestBody int valor) { // @RequestParam(value = "val", required = true) int valor
		Optional<User> us = userService.findById(id);
		User user = us.get();		
		Cuenta cuenta = user.getCuenta();
		int val = cuenta.getMonto() + valor;	
		cuenta.setMonto(val);
		String pattern = "yyyy-MM-dd HH:mm:ss";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

		String fecha = simpleDateFormat.format(new Date());
                cuenta.setFecha(fecha);
		user.setCuenta(cuenta);		
	        userService.save(user);
	}

	@PutMapping(path="/add/{id}")
	public @ResponseBody void update(@PathVariable("id") Long id, @RequestBody User user){
		Optional<User> us = userService.findById(id);
		User use = us.get();		
	        use.setName(user.getName());
		use.setSurname(user.getSurname());
		use.setEmail(user.getEmail());
		use.setDir(user.getDir());
		use.setTel(user.getTel());
		userService.save(use);
	}
	
}
